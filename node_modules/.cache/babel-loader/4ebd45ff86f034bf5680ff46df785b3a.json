{"ast":null,"code":"import { generateQuote } from \"./generateQuote.action\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport quotes from '../../database/quotesDB';\nimport colors from '../../database/colorsDB';\nconst initial_state = {\n  quote: quotes[0].quote,\n  author: quotes[0].author,\n  color: colors[0]\n};\nconst generateReducer = createReducer(initial_state, {\n  [generateQuote.type]: () => ({\n    quote: quotes[Math.floor(Math.random() * quotes.length)].quote,\n    author: quotes[Math.floor(Math.random() * quotes.length)].author,\n    color: colors[Math.floor(Math.random() * colors.length)]\n  })\n});\nexport default generateReducer; // const GENERATE = generateQuote.type;\n//\n// const generateReducer = (state = initial_state, action) => {\n//      switch (action.type) {\n//           case GENERATE: \n//              return {\n//                ...state, \n//                quote: quotes[Math.floor(Math.random() * quotes.length)].quote, \n//                author: quotes[Math.floor(Math.random() * quotes.length)].author, \n//                color: colors[Math.floor(Math.random() * colors.length)]\n//              };\n//           default: \n//              return state;\n//      }\n// }","map":{"version":3,"names":["generateQuote","createReducer","quotes","colors","initial_state","quote","author","color","generateReducer","type","Math","floor","random","length"],"sources":["/home/ducnm51/Downloads/project/Random-quote-machine/src/redux/generateQuote/generateQuote.reducer.js"],"sourcesContent":["import { generateQuote } from \"./generateQuote.action\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport quotes from '../../database/quotesDB';\nimport colors from '../../database/colorsDB';\n\nconst initial_state = {\n     quote: quotes[0].quote,\n     author: quotes[0].author,\n     color: colors[0]\n};\n\n\nconst generateReducer = createReducer(initial_state, {\n     [generateQuote.type]: () => ({\n          quote: quotes[Math.floor(Math.random() * quotes.length)].quote, \n          author: quotes[Math.floor(Math.random() * quotes.length)].author, \n          color: colors[Math.floor(Math.random() * colors.length)]\n     })\n})\n\nexport default generateReducer;\n\n// const GENERATE = generateQuote.type;\n//\n// const generateReducer = (state = initial_state, action) => {\n//      switch (action.type) {\n//           case GENERATE: \n//              return {\n//                ...state, \n//                quote: quotes[Math.floor(Math.random() * quotes.length)].quote, \n//                author: quotes[Math.floor(Math.random() * quotes.length)].author, \n//                color: colors[Math.floor(Math.random() * colors.length)]\n//              };\n//           default: \n//              return state;\n//      }\n// }\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,wBAA9B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,MAAMC,aAAa,GAAG;EACjBC,KAAK,EAAEH,MAAM,CAAC,CAAD,CAAN,CAAUG,KADA;EAEjBC,MAAM,EAAEJ,MAAM,CAAC,CAAD,CAAN,CAAUI,MAFD;EAGjBC,KAAK,EAAEJ,MAAM,CAAC,CAAD;AAHI,CAAtB;AAOA,MAAMK,eAAe,GAAGP,aAAa,CAACG,aAAD,EAAgB;EAChD,CAACJ,aAAa,CAACS,IAAf,GAAsB,OAAO;IACxBJ,KAAK,EAAEH,MAAM,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,MAAM,CAACW,MAAlC,CAAD,CAAN,CAAkDR,KADjC;IAExBC,MAAM,EAAEJ,MAAM,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,MAAM,CAACW,MAAlC,CAAD,CAAN,CAAkDP,MAFlC;IAGxBC,KAAK,EAAEJ,MAAM,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,MAAM,CAACU,MAAlC,CAAD;EAHW,CAAP;AAD0B,CAAhB,CAArC;AAQA,eAAeL,eAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}